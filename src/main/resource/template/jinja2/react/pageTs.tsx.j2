{{ licenseTs }}
{%- set components = {
    'input': False,
    'select': False,
    'datepicker': False,
    'checkbox': False,
    'radio': False,
    'textarea': False,
    'autocomplete': False,
    'cascader': False,
    'colorpicker': False,
    'inputnumber': False,
    'mentions': False,
    'rate': False,
    'slider': False,
    'switch': False,
    'timepicker': False,
    'transfer': False,
    'treeselect': False,
    'upload': False,
    'dict_type': False
} %}

{%- if "" != tree_parent_code %}
{%- set _ = components.update({'treeselect': True}) %}
{%- endif %}
'use client';
import SvgIcon from '@/components/assist/svg-icon';
import ActionButtonComponent from '@/components/base/action-button';
import { PaginatedTable } from '@/components/base/paginated-table';
import TransitionWrapper from '@/components/base/transition-wrapper';
import {
  batchCreate{{ CNs }},
  batchDelete{{ CN }},
  batchUpdate{{ CNs }},
  create{{ CN }},
  delete{{ CN }},
  export{{ CN }},
  import{{ CN }},
  update{{ CN }},
  use{{ CN }},
  use{{ CNs }},
} from '@/service/{{ c_kebab_n }}';
import { createPaginationRequest } from '@/types';
import {
  BatchUpdate{{ CN }},
  Create{{ CN }},
  List{{ CNs }}Request,
  {{ CN }},
  Update{{ CN }},
} from '@/types/{{ c_kebab_n }}';
import { Form, message, Popconfirm } from 'antd';
import { ColumnsType } from 'antd/lib/table';
import dayjs from 'dayjs';
import { Eye, MoreHorizontal, PenLine, Trash2 } from 'lucide-react';
import type { RcFile } from 'rc-upload/lib/interface';
import React, { useState } from 'react';
import BatchUpdate{{ CN }}Component from './components/batch-update-{{ c_kebab_n }}';
import Create{{ CN }}Component from './components/create-{{ c_kebab_n }}';
import Import{{ CN }}Component from './components/import-{{ c_kebab_n }}';
import {{ CN }}DetailComponent from './components/{{ c_kebab_n }}-detail';
import Query{{ CN }}Component from './components/query-{{ c_kebab_n }}';
import Update{{ CN }}Component from './components/update-{{ c_kebab_n }}';

const {{ CN }}Page: React.FC = () => {
  // 配置模块
  const actionConfig = {
    showCreate: true,
    showImport: true,
    showExport: true,
    showModify: true,
    showRemove: true,
  };
  const showMore = false;

  // 查询模块
  const [isQuery{{ CN }}Show, setIsQuery{{ CN }}Show] = useState<boolean>(true);
  const [current, setCurrent] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const [query{{ CN }}Form] = Form.useForm();
  const [{{ cN }}QueryParams, set{{ CN }}QueryParams] = useState<List{{ CNs }}Request>();

  // 用 use{{ CNs }} 获取菜单列表数据
  const {
    {{ cNs }}: {{ cN }}ListDataSource,
    total,
    isLoading: is{{ CN }}ListLoading,
    mutate{{ CNs }},
  } = use{{ CNs }}({
    ...{{ cN }}QueryParams,
    ...createPaginationRequest(current, pageSize),
  });

  const onQuery{{ CN }}Show = () => {
    setIsQuery{{ CN }}Show((prevState) => !prevState);
  };

  const handlePaginationChange = (newPage: number, newPageSize: number) => {
    setCurrent(newPage);
    setPageSize(newPageSize);
  };

  const resetPagination = () => {
    setCurrent(1);
    setPageSize(10);
  };

  const handleQuery{{ CN }}Reset = () => {
    resetPagination();
    query{{ CN }}Form.resetFields();
    mutate{{ CNs }}();
  };

  const onQuery{{ CN }}Finish = async () => {
    const values = query{{ CN }}Form.getFieldsValue();
    const { create_time } = values;
    if (create_time) {
      const [startDate, endDate] = create_time;
      values.create_time = [
        startDate.format('YYYY-MM-DD'),
        endDate.format('YYYY-MM-DD'),
      ];
    }
    const query{{ CN }} = values as List{{ CNs }}Request;
    const filteredQuery{{ CN }} = Object.fromEntries(
      Object.entries(query{{ CN }}).filter(
        ([, value]) => value !== undefined && value !== null && value !== '',
      ),
    );
    resetPagination();
    set{{ CN }}QueryParams(filteredQuery{{ CN }} as List{{ CNs }}Request);
  };

  // 详情模块
  const [is{{ CN }}DetailDrawerVisible, setIs{{ CN }}DetailDrawerVisible] =
    useState(false);
  const [selected{{ CN }}Id, setSelected{{ CN }}Id] = useState<string | null>(null);

  const { {{ cN }}: {{ cN }}Detail, isLoading: is{{ CN }}DetailLoading } = use{{ CN }}(
    selected{{ CN }}Id || '',
  );

  const on{{ CN }}Detail = ({{ cN }}: {{ CN }}) => {
    setSelected{{ CN }}Id({{ cN }}.id);
    setIs{{ CN }}DetailDrawerVisible(true);
  };

  const on{{ CN }}DetailClose = () => {
    setSelected{{ CN }}Id(null);
    setIs{{ CN }}DetailDrawerVisible(false);
  };

  // 表格列信息
  const {{ cN }}Columns: ColumnsType<{{CN}}> = [
    {
      title: "Id",
      dataIndex: "{{ primary_key }}",
      key: "{{ primary_key }}",
      hidden: true,
    },
    {
      title: "序号",
      dataIndex: "No",
      key: "No",
      render: (_: number, _record: {{CN}}, rowIndex: number) => rowIndex + 1,
      width: "8%",
    },
    {%- for context in fields %}
    {%- set dict_type = context.field.dict_type %}
    {%- set comment = "" -%}
    {%- if context.field.listable == 1 and context.field.field_name != primary_key -%}
        {%- if context.field.comment and context.field.comment != "" -%}
            {%- set parentheseIndex_en = context.field.comment.find("(") -%}
            {%- set parentheseIndex_cn = context.field.comment.find("（") -%}
            {%- if parentheseIndex_en!= -1 -%}
                {% set comment = context.field.comment[:parentheseIndex_en] %}
            {%- elif parentheseIndex_cn!= -1 -%}
                {% set comment = context.field.comment[:parentheseIndex_cn] %}
            {%- else -%}
                {%- set comment = context.field.comment -%}
            {%- endif -%}
        {%- endif %}
    {
      title: "{% if comment %}{{ comment }}{% else %}{{ context.field.field_name }}{% endif %}",
      dataIndex: "{{ context.field.field_name }}",
      key: "{{ context.field.field_name }}",
      {%- if "Time" in context.field.field_name or "Date" in context.field.field_name or "time" in context.field.field_name or "date" in context.field.field_name or "day" in context.field.field_name %}
      render: (text: string) => (
        text ? <span>{dayjs(text).format('YYYY-MM-DD HH:mm:ss')}</span>: "-"
      ),
      width: "14%",
      {%- elif context.field.html_type == "imageUpload" %}
      render: (text) => (text ? <ImagePreview src={text} width="100%" /> : "-"),
      {%- elif dict_type %}
      render: (text) => {
          const values = (text!== undefined && text!== null)? String(text).split(',') : [];
          return values.map((value, index) => {
              const item = dictData["{{ dict_type }}"].find((d) => d.value === value);
              if (item) {
                  const content = <span key={item.value}>{item.label}</span>;
                  return index < values.length - 1? (
                      <React.Fragment key={`${item.value}-with-comma`}>
                          {content},&nbsp;
                      </React.Fragment>
                  ) : content;
              }
              return null;
          });
      },
      {% elif context.field.js_type == "string" %}
      render: (text) => (text ? text : "-"),
      width: "12%",
      {%- endif %}
      {%- if context.field.js_type == "string" %}
      ellipsis: true,
      {%- elif context.field.js_type == "number" %}
      width: "6%",
      {%- endif %}
    },
    {%- endif%}
    {%- endfor %}
    {
      title: "操作",
      key: "action",
      align: "center",
      render: (_, record) => (
        <div className="flex gap-2 items-center justify-center">
          <button
            type="button"
            className="flex items-center gap-0.5 text-xs btn-operation"
            onClick={ () => on{{ CN }}Detail(record)}
          >
            <Eye className="w-3 h-3" />
            详情
          </button>
          <button
            type="button"
            className="flex items-center gap-0.5 text-xs btn-operation"
            onClick={ () => onUpdate{{ CN }}(record)}
          >
            <PenLine className="w-3 h-3" />
            编辑
          </button>
          <Popconfirm
            title="确认删除"
            description="确定删除吗? 删除后将无法找回"
            onConfirm={() => handleDelete{{ CN }}(record)}
            okText="确认"
            cancelText="取消"
          >
            <button
              type="button"
              className="flex items-center gap-0.5 text-xs btn-remove"
            >
              <Trash2 className="w-3 h-3" />
              删除
            </button>
          </Popconfirm>

          {showMore && (
            <button type="button" className="flex items-center gap-0.5 text-xs btn-operation">
              <span>更多</span>
              <MoreHorizontal className="w-3 h-3" />
            </button>
          )}
        </div>
      ),
    },
  ]

  const [visibleColumns, setVisibleColumns] = useState(
    {{ cN }}Columns.map((col) => col.key),
  );
  const onToggleColumnVisibility = (columnKey: string) => {
    setVisibleColumns((prevVisibleColumns) => {
      if (prevVisibleColumns.includes(columnKey)) {
        return prevVisibleColumns.filter((key) => key !== columnKey);
      } else {
        return [...prevVisibleColumns, columnKey];
      }
    });
  };
  const filtered{{ CN }}Columns = {{ cN }}Columns.filter((col) =>
    visibleColumns.includes(col.key),
  );

  // 新增模块
  const [isCreate{{ CN }}ModalVisible, setIsCreate{{ CN }}ModalVisible] =
    useState(false);
  const [isCreate{{ CN }}Loading, setIsCreate{{ CN }}Loading] = useState(false);
  const [create{{ CN }}Form] = Form.useForm();

  const onCreate{{ CN }} = () => {
    setIsCreate{{ CN }}ModalVisible(true);
  };
  const handleCreate{{ CN }}Cancel = () => {
    create{{ CN }}Form.resetFields();
    setIsCreate{{ CN }}ModalVisible(false);
  };
  const handleCreate{{ CN }}Finish = async (data: Create{{ CN }}) => {
    setIsCreate{{ CN }}Loading(true);
    try {
      await create{{ CN }}({ {{ cN }}: data });
      message.success('新增成功');
      create{{ CN }}Form.resetFields();
      setIsCreate{{ CN }}ModalVisible(false);
      mutate{{ CNs }}();
    } finally {
      setIsCreate{{ CN }}Loading(false);
    }
  };

  // 单个删除模块
  const handleDelete{{ CN }} = async ({{ cN }}: {{ CN }}) => {
    await delete{{ CN }}({{ cN }}.id);
    message.success('删除成功');
    mutate{{ CNs }}();
  };

  // 批量删除模块
  const [isBatchRemoveLoading, setIsBatchRemoveLoading] =
    useState<boolean>(false);
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [selectedRows, setSelectedRows] = useState<{{ CN }}[]>([]);

  const resetSelectedRows = () => {
    setSelectedRowKeys([]);
    setSelectedRows([]);
  };

  const handleSelectionChange = (
    selectedRowKeys: React.Key[],
    selectedRows: {{ CN }}[],
  ) => {
    setSelectedRows(selectedRows);
    setSelectedRowKeys(selectedRowKeys);
  };

  const handle{{ CN }}BatchRemove = async () => {
    if (selectedRowKeys.length === 0) {
      message.warning('请先选择要删除的项目');
      return;
    }
    try {
      setIsBatchRemoveLoading(true);
      await batchDelete{{ CN }}({ ids: selectedRows.map((row) => row.id) });
      message.success('删除成功');
      mutate{{ CNs }}();
      resetSelectedRows();
    } finally {
      setIsBatchRemoveLoading(false);
    }
  };

  const handle{{ CN }}BatchRemoveCancel = async () => {
    resetSelectedRows();
    message.info('操作已取消');
  };

  // 单个更新模块
  const [isUpdate{{ CN }}ModalVisible, setIsUpdate{{ CN }}ModalVisible] =
    useState<boolean>(false);
  const [isUpdate{{ CN }}Loading, setIsUpdate{{ CN }}Loading] =
    useState<boolean>(false);
  const [update{{ CN }}Form] = Form.useForm();

  const onUpdate{{ CN }} = ({{ cN }}: {{ CN }}) => {
    setIsUpdate{{ CN }}ModalVisible(true);
    setSelectedRowKeys([{{ cN }}.id]);
    setSelectedRows([{{ cN }}]);
    update{{ CN }}Form.setFieldsValue({ ...{{ cN }} });
  };

  const handleUpdate{{ CN }}Cancel = () => {
    resetSelectedRows();
    update{{ CN }}Form.resetFields();
    setIsUpdate{{ CN }}ModalVisible(false);
  };

  const handleUpdate{{ CN }}Finish = async () => {
    const update{{ CN }}Data =
      (await update{{ CN }}Form.validateFields()) as Update{{ CN }};
    const req = { ...update{{ CN }}Data, id: selectedRows[0].id };
    setIsUpdate{{ CN }}Loading(true);
    try {
      await update{{ CN }}({ {{ cN }}: req });
      update{{ CN }}Form.resetFields();
      message.success('更新成功');
      mutate{{ CNs }}();
      resetSelectedRows();
    } finally {
      setIsUpdate{{ CN }}Loading(false);
      setIsUpdate{{ CN }}ModalVisible(false);
    }
  };

  // 批量更新模块
  const on{{ CN }}BatchModify = () => {
    if (selectedRowKeys.length === 1) {
      setIsUpdate{{ CN }}ModalVisible(true);
      update{{ CN }}Form.setFieldsValue({ ...selectedRows[0] });
    } else {
      setIsBatchUpdate{{ CNs }}ModalVisible(true);
      batchUpdate{{ CNs }}Form.resetFields();
    }
  };
  const [isBatchUpdate{{ CNs }}ModalVisible, setIsBatchUpdate{{ CNs }}ModalVisible] =
    useState<boolean>(false);
  const [isBatchUpdate{{ CNs }}Loading, setIsBatchUpdate{{ CNs }}Loading] =
    useState<boolean>(false);
  const [batchUpdate{{ CNs }}Form] = Form.useForm();

  const handleBatchUpdate{{ CNs }}Cancel = async () => {
    batchUpdate{{ CNs }}Form.resetFields();
    setIsBatchUpdate{{ CNs }}ModalVisible(false);
    resetSelectedRows();
    message.info('操作已取消');
  };

  const handleBatchUpdate{{ CNs }}Finish = async () => {
    const {{ cN }}BatchModify =
      (await batchUpdate{{ CNs }}Form.validateFields()) as BatchUpdate{{ CN }};
    setIsBatchUpdate{{ CNs }}Loading(true);
    if (selectedRows === null || selectedRows.length === 0) {
      message.warning('请选择要更新的项目');
      return;
    }
    try {
      const ids = selectedRows.map((row) => row.id);
      await batchUpdate{{ CNs }}({ ids: ids, {{ cN }}: {{ cN }}BatchModify });
      batchUpdate{{ CNs }}Form.resetFields();
      message.success('更新成功');
      mutate{{ CNs }}();
      resetSelectedRows();
    } finally {
      setIsBatchUpdate{{ CNs }}Loading(false);
      setIsBatchUpdate{{ CNs }}ModalVisible(false);
    }
  };

  // 导入模块
  const [isImport{{ CN }}ModalVisible, setIsImport{{ CN }}ModalVisible] =
    useState<boolean>(false);
  const [isImport{{ CN }}Loading, setIsImport{{ CN }}Loading] =
    useState<boolean>(false);
  const [create{{ CN }}List, setCreate{{ CN }}List] = useState<Create{{ CN }}[]>([]);

  const onImport{{ CN }} = () => {
    setIsImport{{ CN }}ModalVisible(true);
  };

  const handleImport{{ CN }}Cancel = () => {
    setIsImport{{ CN }}ModalVisible(false);
  };

  const onImport{{ CN }}Finish = async (fileList: RcFile[]) => {
    try {
      setIsImport{{ CN }}Loading(true);
      const create{{ CN }}List = await import{{ CN }}({ file: fileList[0] });
      setCreate{{ CN }}List(create{{ CN }}List.{{ cNs }});
      return create{{ CN }}List;
    } finally {
      setIsImport{{ CN }}Loading(false);
    }
  };

  const handleImport{{ CN }} = async () => {
    setIsImport{{ CN }}Loading(true);
    try {
      await batchCreate{{ CNs }}({ {{ cNs }}: create{{ CN }}List });
      message.success('导入成功');
      setIsImport{{ CN }}ModalVisible(false);
      mutate{{ CNs }}();
    } finally {
      setIsImport{{ CN }}Loading(false);
      setCreate{{ CN }}List([]);
    }
  };

  // 导出模块
  const [isExportLoading, setIsExportLoading] = useState<boolean>(false);
  const on{{ CN }}Export = async () => {
    if (selectedRowKeys === null || selectedRowKeys.length === 0) {
      message.warning('请先选择导出的项目');
      return;
    }
    try {
      setIsExportLoading(true);
      await export{{ CN }}({ ids: selectedRows.map((row) => row.id) });
      resetSelectedRows();
    } finally {
      setIsExportLoading(false);
    }
  };

  return (
    <div className="w-full mx-auto px-4 bg-white">
      <TransitionWrapper show={isQuery{{ CN }}Show}>
        <Query{{ CN }}Component
          onQuery{{ CN }}Finish={onQuery{{ CN }}Finish}
          onQuery{{ CN }}Reset={handleQuery{{ CN }}Reset}
          onQuery{{ CN }}Form={query{{ CN }}Form}
        />
      </TransitionWrapper>
      <div>
        <ActionButtonComponent
          onCreate={onCreate{{ CN }} }
          onImport={onImport{{ CN }} }
          onExport={on{{ CN }}Export}
          onBatchModify={on{{ CN }}BatchModify}
          onConfirmBatchRemove={handle{{ CN }}BatchRemove}
          onConfirmBatchRemoveCancel={handle{{ CN }}BatchRemoveCancel}
          isQueryShow={isQuery{{ CN }}Show}
          onQueryShow={onQuery{{ CN }}Show}
          isExportDisabled={selectedRowKeys.length === 0}
          isBatchModifyDisabled={selectedRowKeys.length === 0}
          isBatchRemoveDisabled={selectedRowKeys.length === 0}
          isBatchRemoveLoading={isBatchRemoveLoading}
          isExportLoading={isExportLoading}
          rawColumns={ {{ cN }}Columns as any[]}
          visibleColumns={visibleColumns as any[]}
          onToggleColumnVisibility={onToggleColumnVisibility}
          actionConfig={actionConfig}
          className="mb-2 mt-4"
        />
      </div>
      <div>
        <PaginatedTable<{{ CN }}>
          columns={filtered{{ CN }}Columns}
          dataSource={ {{ cN }}ListDataSource || []}
          total={total || 0}
          current={current}
          page_size={pageSize}
          onPaginationChange={handlePaginationChange}
          onSelectionChange={handleSelectionChange}
          selectedRowKeys={selectedRowKeys}
          rowKey="id"
          loading={is{{ CN }}ListLoading}
        />
      </div>
      <div>
        <div>
          <Create{{ CN }}Component
            isCreate{{ CN }}ModalVisible={isCreate{{ CN }}ModalVisible}
            onCreate{{ CN }}Cancel={handleCreate{{ CN }}Cancel}
            onCreate{{ CN }}Finish={handleCreate{{ CN }}Finish}
            isCreate{{ CN }}Loading={isCreate{{ CN }}Loading}
            create{{ CN }}Form={create{{ CN }}Form}
            {%- if components.treeselect %}
            treeSelectDataSource={ {{ cN }}ListDataSource}
            {%- endif %}
          />
        </div>
        <div>
          <{{ CN }}DetailComponent
            is{{ CN }}DetailDrawerVisible={is{{ CN }}DetailDrawerVisible}
            on{{ CN }}DetailClose={on{{ CN }}DetailClose}
            {{ cN }}Detail={ {{ cN }}Detail}
            loading={is{{ CN }}DetailLoading}
          />
        </div>
        <div>
          <Update{{ CN }}Component
            isUpdate{{ CN }}ModalVisible={isUpdate{{ CN }}ModalVisible}
            onUpdate{{ CN }}Cancel={handleUpdate{{ CN }}Cancel}
            onUpdate{{ CN }}Finish={handleUpdate{{ CN }}Finish}
            isUpdate{{ CN }}Loading={isUpdate{{ CN }}Loading}
            update{{ CN }}Form={update{{ CN }}Form}
            {%- if components.treeselect %}
            treeSelectDataSource={ {{ cN }}ListDataSource}
            {%- endif %}
          />
        </div>
        <div>
          <BatchUpdate{{ CN }}Component
            isBatchUpdate{{ CNs }}ModalVisible={isBatchUpdate{{ CNs }}ModalVisible}
            onBatchUpdate{{ CNs }}Cancel={handleBatchUpdate{{ CNs }}Cancel}
            onBatchUpdate{{ CNs }}Finish={handleBatchUpdate{{ CNs }}Finish}
            isBatchUpdate{{ CNs }}Loading={isBatchUpdate{{ CNs }}Loading}
            batchUpdate{{ CNs }}Form={ batchUpdate{{ CNs }}Form}
          />
        </div>

        <div>
          <Import{{ CN }}Component
            isImport{{ CN }}ModalVisible={isImport{{ CN }}ModalVisible}
            isImport{{ CN }}Loading={isImport{{ CN }}Loading}
            onImport{{ CN }}Finish={onImport{{ CN }}Finish}
            onImport{{ CN }}Cancel={handleImport{{ CN }}Cancel}
            handleImport{{ CN }}={handleImport{{ CN }} }
          />
        </div>
      </div>
    </div>
  );
};

export default {{ CN }}Page;
