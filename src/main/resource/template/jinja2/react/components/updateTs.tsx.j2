{{ license }}
{%- set components = {
    'input': False,
    'select': False,
    'datepicker': False,
    'checkbox': False,
    'radio': False,
    'textarea': False,
    'autocomplete': False,
    'cascader': False,
    'colorpicker': False,
    'inputnumber': False,
    'mentions': False,
    'rate': False,
    'slider': False,
    'switch': False,
    'timepicker': False,
    'transfer': False,
    'treeselect': False,
    'upload': False,
    'dict_type': False
} %}

{%- if "" != tree_parent_code %}
{%- set _ = components.update({'treeselect': True}) %}
{%- endif %}

{%- for field in fields %}
    {%- set html_type = field.gen_field.html_type %}
    {%- if html_type in components %}
        {%- set _ = components.update({html_type: True}) %}
    {%- endif %}
    {%- if field.dict_type != "" %}
        {%- set _ = components.update({'dict_type': True}) %}
    {%- endif %}
{%- endfor %}

{%- if components.input -%}
import { Input } from 'antd';
{%- endif %}
{%- if components.select %}
import { Select } from 'antd';
{%- endif %}
{%- if components.datepicker %}
import { DatePicker } from 'antd';
{%- endif %}
{%- if components.checkbox %}
import { Checkbox } from 'antd';
{%- endif %}
{%- if components.radio %}
import { Radio } from 'antd';
{%- endif %}
{%- if components.treeselect %}
import { DownOutlined } from '@ant-design/icons';
import { TreeSelect } from 'antd';
import { TreeSelectUtil } from '@/utils/select-util';
import { {{ CN }}Page } from '@/types/{{ cn }}';
{%- endif %}
import {
  AutoComplete,
  Button,
  Cascader,
  ColorPicker,
  Form,
  InputNumber, Mentions,
  Modal, Rate,
  Slider, Switch, TimePicker, Transfer, Upload,
} from 'antd';
{%- if components.dict_type %}
import { useAppSelector } from '@/stores';
{%- endif %}
import { Update{{ CN }} } from '@/types/{{ cn }}';
import { FormInstance } from 'antd/es/form';
import React, { useMemo } from 'react';

interface Update{{ CN }}Props {
  isUpdate{{ CN }}ModalVisible: boolean;
  onUpdate{{ CN }}Cancel: () => void;
  onUpdate{{ CN }}Finish: () => void;
  isUpdate{{ CN }}Loading: boolean;
  update{{ CN }}Form: FormInstance<Update{{ CN }}>;
{%- if components.treeselect %}
  treeSelectDataSource?: {{ CN }}Page[];
{%- endif %}
}

const update{{ CN }}FormItemLayout = {
  labelCol: { span: 6 },
  wrapperCol: { span: 18 },
};

const Update{{ CN }}Component: React.FC<Update{{ CN }}Props> = ({
  isUpdate{{ CN }}ModalVisible,
  onUpdate{{ CN }}Cancel,
  onUpdate{{ CN }}Finish,
  isUpdate{{ CN }}Loading,
  update{{ CN }}Form,
{%- if components.treeselect %}
  treeSelectDataSource,
{%- endif %}
}) => {
{%- if components.treeselect %}
  const treeSelectDataTransform = [{ name: '根目录', id: 0, children: treeSelectDataSource }];
  const treeSelectData = TreeSelectUtil.transform(treeSelectDataTransform as any);
{%- endif %}
  const footerButtons = useMemo(
    () => [
      <Button key="cancel" onClick={onUpdate{{ CN }}Cancel}>
        取消
      </Button>,
      <Button key="submit" type="primary" loading={isUpdate{{ CN }}Loading} onClick={onUpdate{{ CN }}Finish}>
        确定
      </Button>,
    ],
    [isUpdate{{ CN }}Loading, onUpdate{{ CN }}Cancel],
  );
{%- if "" != components.dict_type %}
  const { dictData } = useAppSelector((state: Record<string, any>) => state.dict);
{%- endif %}

  return (
    <Modal
      title="{{ function_name }}编辑"
      open={isUpdate{{ CN }}ModalVisible}
      onCancel={onUpdate{{ CN }}Cancel}
      footer={footerButtons}
      destroyOnClose
      width={"60%"}
    >
        <Form
          {...update{{ CN }}FormItemLayout}
          form={ update{{ CN }}Form}
          name="update{{ CN }}"
          onFinish={onUpdate{{ CN }}Finish}
          className="grid grid-cols-1 lg:grid-cols-2 gap-y-0 gap-x-2 pt-4"
        >
          {%- for field in fields %}
          {%- set comment = "" %}
          {%- if field.gen_field.modifiable == 1 and field.gen_field.field_name != primary_key %}
          {%- if field.field.comment and field.field.comment != "" %}
              {%- set parentheseIndex_en = field.field.comment.find("(") %}
              {%- set parentheseIndex_cn = field.field.comment.find("（") %}
              {%- if parentheseIndex_en!= -1 %}
                  {%- set comment = field.field.comment[:parentheseIndex_en] %}
              {%- elif parentheseIndex_cn!= -1 %}
                  {%- set comment = field.field.comment[:parentheseIndex_cn] %}
              {%- else %}
                  {%- set comment = field.field.comment %}
              {%- endif %}
          {%- endif %}
          {%- set field_name = field.gen_field.field_name %}
          {%- set html_type = field.gen_field.html_type %}
          {%- set dict_type = field.gen_field.dict_type %}
          <Form.Item name="{{ field_name }}" label="{{ comment }}" rules={[{ required: false, message: '请输入' }]}>
            {%- if field_name == tree_parent_code and "" != tree_parent_code %}
            <TreeSelect
              placeholder="请选择{{comment}}"
              allowClear
              multiple
              maxCount={1}
              treeCheckable
              showCheckedStrategy={TreeSelect.SHOW_CHILD}
              treeData={treeSelectData}
            />
            {%- elif html_type == 'input' %}
            <Input placeholder="请输入{{ comment }}" />
            {%- elif html_type =='select' %}
            {%- if dict_type %}
            <Select
                placeholder="请选择{{ comment }}"
                options={ dictData["{{ dict_type }}"] }
            />
            {%- else %}
            <Select placeholder="请选择{{ comment }}" />
            {%- endif %}
            {%- elif html_type == 'datepicker' or html_type == 'datetime' %}
            <DatePicker format="YYYY-MM-DD" placeholder="请选择{{ comment }}" />
            {%- elif html_type == 'checkbox' %}
            {%- if dict_type %}
            <Checkbox.Group options={ dictData["{{ dict_type }}"] } />
            {%- else %}
            <Checkbox.Group options={ ["请选择字典生成"] } />
            {%- endif %}
            {%- elif html_type == 'radio' %}
            {%- if dict_type %}
            <Radio.Group options={ dictData["{{ dict_type }}"] } />
            {%- else %}
            <Radio.Group options={ ["请选择字典生成"] } />
            {%- endif %}
            {%- elif html_type == 'textarea' %}
            <Input.TextArea />
            {%- elif html_type == 'autocomplete' %}
            <AutoComplete placeholder="请输入{{ comment }}" />
            {%- elif html_type == 'cascader' %}
            <Cascader placeholder="请选择{{ comment }}" />
            {%- elif html_type == 'colorpicker' %}
            <ColorPicker />
            {%- elif html_type == 'inputnumber' %}
            <InputNumber placeholder="请输入数字" />
            {%- elif html_type =='mentions' %}
            <Mentions placeholder="请提及{{ comment }}" />
            {%- elif html_type == 'rate' %}
            <Rate />
            {%- elif html_type =='slider' %}
            <Slider />
            {%- elif html_type =='switch' %}
            <Switch />
            {%- elif html_type == 'timepicker' %}
            <TimePicker placeholder="请选择时间" />
            {%- elif html_type == 'transfer' %}
            <Transfer />
            {%- elif html_type == 'treeselect' %}
            <TreeSelect placeholder="请选择" />
            {%- elif html_type == 'upload' %}
            <Upload />
            {%- else %}
            <Input placeholder="请输入{{ comment }}" />
            {%- endif %}
          </Form.Item>
          {%- endif %}
          {%- endfor %}
        </Form>
    </Modal>
  );
};

export default Update{{ CN }}Component;
