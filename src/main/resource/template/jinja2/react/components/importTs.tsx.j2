{{ licenseTs }}
import { export{{ CN }}Template } from '@/service/{{ c_kebab_n }}';
import { Create{{ CN }}, Import{{ CNs }}Response} from '@/types/{{ c_kebab_n }}';
import { InboxOutlined } from '@ant-design/icons';
import { Button, Modal, Table, Upload, UploadFile, message } from 'antd';
import { ColumnsType } from 'antd/lib/table';
import { UploadRequestOption } from 'rc-upload/es/interface';
import type { RcFile } from 'rc-upload/lib/interface';
import React, { useState } from 'react';

interface Import{{ CN }}Props {
  isImport{{ CN }}ModalVisible: boolean;
  isImport{{ CN }}Loading: boolean;
  onImport{{ CN }}Cancel: () => void;
  onImport{{ CN }}Finish: (fileList: RcFile[]) => Promise<Import{{ CNs }}Response>;
  handleImport{{ CN }}: () => void;
}

const Import{{ CN }}Component: React.FC<Import{{ CN }}Props> = ({
  isImport{{ CN }}ModalVisible,
  onImport{{ CN }}Cancel,
  onImport{{ CN }}Finish,
  isImport{{ CN }}Loading,
  handleImport{{ CN }},
}) => {
  const [{{ cN }}ImportFileList, setImport{{ CN }}FileList] = useState<RcFile[]>([]);
  const [Create{{ CN }}List, setCreate{{ CN }}List] = useState<Create{{ CN }}[]>([]);
  const [isUploadShow, setIsUploadShow] = useState<boolean>(true);

  const footerButtons = () => [
    <Button key="back" onClick={handleImport{{ CN }}Cancel}>
      取消
    </Button>,
    <Button key="submit" type="primary" loading={isImport{{ CN }}Loading} onClick={handleImport{{ CN }}Confirm}>
      确定
    </Button>,
  ];

  const handleImport{{ CN }}Confirm = async () => {
    if (isUploadShow) {
      if ({{ cN }}ImportFileList.length === 0) {
        message.warning('请先选择文件');
        return;
      }
      try {
        const import{{ CN }}Response = await onImport{{ CN }}Finish({{ cN }}ImportFileList);
        setIsUploadShow(false);
        setCreate{{ CN }}List(import{{ CN }}Response.{{ cNs }});
      } finally {
        setImport{{ CN }}FileList([]);
      }
    } else {
      handleImport{{ CN }}();
      setIsUploadShow(true);
    }
  };
  // 表格列信息
  const {{ CN }}Columns: ColumnsType<Create{{ CN }}> = [
    {
      title: "序号",
      dataIndex: "No",
      key: "No",
      render: (_: number, _record: Create{{ CN }}, rowIndex: number) => rowIndex + 1,
      width: "8%",
    },
    {%- for context in fields %}
    {%- set comment = "" %}
    {%- if context.field.pageable == 1 and context.field.field_name != primary_key %}
    {%- if context.field.comment and context.field.comment != "" %}
      {%- set parentheseIndex_en = context.field.comment.find("(") %}
      {%- set parentheseIndex_cn = context.field.comment.find("（") %}
      {%- if parentheseIndex_en!= -1 %}
          {%- set comment = context.field.comment[:parentheseIndex_en] %}
      {%- elif parentheseIndex_cn!= -1 %}
          {%- set comment = context.field.comment[:parentheseIndex_cn] %}
      {%- else %}
          {%- set comment = context.field.comment %}
      {%- endif %}
    {%- endif %}
    {
      title: "{% if comment %}{{ comment }}{% else %}{{ context.field.field_name }}{% endif %}",
      dataIndex: "{{ context.field.field_name }}",
      key: "{{ context.field.field_name }}",
      render: (text) => (text ? text : "-"),
    },
    {%- endif%}
    {%- endfor %}
    {
      title: "错误信息",
      dataIndex: "errMsg",
      key: "errMsg",
      render: (text) => (text ? text : "-"),
    },
  ];

  const handle{{ CN }}ExportTemplate = async () => {
    await export{{ CN }}Template();
  };

  const customUploadRequest = async (options: UploadRequestOption): Promise<void | undefined> => {
    const { onSuccess, onError, file } = options;
    const rcFile = file as RcFile;
    if (!rcFile.name.endsWith('.xls') && !rcFile.name.endsWith('.xlsx')) {
      message.error('仅支持xls、xlsx格式文件');
      onError?.(new Error('仅支持xls、xlsx格式文件'));
      return;
    }
    setImport{{ CN }}FileList((prev) => [...prev, rcFile]);
    setTimeout(() => {
      onSuccess?.(rcFile);
    }, 200);
  };

  const handleRemove = (file: UploadFile) => {
    setImport{{ CN }}FileList((prev) => prev.filter((f) => f.uid !== file.uid));
  };

  const handleImport{{ CN }}Cancel = () => {
    onImport{{ CN }}Cancel();
    setIsUploadShow(true);
  };

  return (
    <Modal
      title="{{ function_name }}导入"
      open={isImport{{ CN }}ModalVisible}
      onCancel={handleImport{{ CN }}Cancel}
      footer={footerButtons}
      width={'70%'}
    >
      {isUploadShow ? (
        <div>
          <div>
            <Upload.Dragger
              name="file"
              multiple
              accept=".xlsx,.xls"
              onRemove={handleRemove}
              fileList={ {{ cN }}ImportFileList}
              customRequest={customUploadRequest as any}
            >
              <p className="sc-upload-drag-icon">
                <InboxOutlined />
              </p>
              <p className="sc-upload-text">{'点击或拖拽到此上传'}</p>
              <p className="sc-upload-hint">仅支持上传xls、xlsx格式的文件</p>
            </Upload.Dragger>
          </div>
          <div onClick={handle{{ CN }}ExportTemplate} className="cursor-pointer mt-4 text-blue-600">
            下载模板
          </div>
        </div>
      ) : (
        <div>
          <Table
            columns={ {{ CN }}Columns}
            dataSource={ Create{{ CN }}List}
            pagination={false}
            bordered={false}
            rowKey={'id'}
          />
        </div>
      )}
    </Modal>
  );
};

export default Import{{ CN }}Component;
