{%- set components = {
    'dict_type': False
} %}
{%- for field in fields %}
    {%- if field.dict_type != "" %}
        {%- set _ = components.update({'dict_type': True}) %}
    {%- endif %}
{%- endfor %}
{%- if "" != components.dict_type %}
import { useAppSelector } from '@/stores';
{%- endif %}
import { Form } from "antd";
import ActionButtonComponent from "@/components/base/action-button";
import { PaginatedTable } from "@/components/base/paginated-table";
import { message } from "@/components/GlobalToast";
import dayjs from 'dayjs';
import {
  batchCreate{{ class_name }},
  batchUpdate{{ class_name }},
  batchRemove{{ class_name }},
  create{{ class_name }},
  export{{ class_name }}Page,
  fetch{{ class_name }}ByPage,
  fetch{{ class_name }}Detail,
  import{{ class_name }},
  modify{{ class_name }},
  remove{{ class_name }},
} from "@/service/{{ kebab_case_class_name }}";
import { BaseQueryImpl } from "@/types";
import { {{ class_name }}BatchUpdate, {{ class_name }}Create, {{ class_name }}Detail, {{ class_name }}Update, {{ class_name }}Page, {{ class_name }}Query } from "@/types/{{ kebab_case_class_name }}";
import {{ class_name }}BatchUpdateComponent from "@/views/system/{{ kebab_case_class_name }}/components/{{ kebab_case_class_name }}-batch-modify";
import {{ class_name }}CreateComponent from "@/views/system/{{ kebab_case_class_name }}/components/{{ kebab_case_class_name }}-create";
import {{ class_name }}ImportComponent from "@/views/system/{{ kebab_case_class_name }}/components/{{ kebab_case_class_name }}-import";
import {{ class_name }}UpdateComponent from "@/views/system/{{ kebab_case_class_name }}/components/{{ kebab_case_class_name }}-modify";
import {{ class_name }}QueryComponent from "@/views/system/{{ kebab_case_class_name }}/components/{{ kebab_case_class_name }}-query";
import { ColumnsType } from "antd/lib/table";
import type { RcFile } from "rc-upload/lib/interface";
import React, { useEffect, useState } from "react";
import { DeleteOutlined, EditOutlined, EyeOutlined, MoreOutlined } from '@ant-design/icons';
import {{ class_name }}DetailComponent from "@/views/system/{{ kebab_case_class_name }}/components/{{ kebab_case_class_name }}-detail";
import TransitionWrapper from '@/components/base/transition-wrapper';

const {{ class_name }}: React.FC = () => {
  // 配置模块
  const actionConfig = {
    showCreate: true,
    showImport: true,
    showExport: true,
    showUpdate: true,
    showRemove: true,
  };
  const showMore = false;

  // 查询模块
{%- if "" != components.dict_type %}
  const { dictData } = useAppSelector((state: Record<string, any>) => state.dict);
{%- endif %}
  const [is{{ class_name }}QueryShow, setIs{{ class_name }}QueryShow] = useState<boolean>(true)
  const [{{ lowercase_class_name }}PageDataSource, set{{ class_name }}PageDataSource] = useState<{{ class_name }}Page[]>([]);
  const [{{ lowercase_class_name }}PageTotalCount, set{{ class_name }}PageTotalCount] = useState(0);
  const [current, setCurrent] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const on{{ class_name }}QueryShow = () => {
    setIs{{ class_name }}QueryShow(prevState => !prevState)
  }
  useEffect(() => {
    const fetchData = async () => {
      const {{ lowercase_class_name }}Query = (await {{ lowercase_class_name }}QueryForm.validateFields()) as {{ class_name }}Query;
      const pageData = BaseQueryImpl.create(current, pageSize);
      const resp = await fetch{{ class_name }}ByPage(pageData, {{ lowercase_class_name }}Query);
      set{{ class_name }}PageDataSource(resp.records);
      set{{ class_name }}PageTotalCount(resp.total);
    };
    fetchData().then(() => {
    });
  }, [current, pageSize]);

  const handlePaginationChange = (newPage: number, newPageSize: number) => {
    setCurrent(newPage);
    setPageSize(newPageSize);
  };
  const resetPagination = () => {
    setCurrent(1);
    setPageSize(10);
  };

  // 详情模块
  const [is{{ class_name }}DetailDrawerVisible, setIs{{ class_name }}DetailDrawerVisible] = useState<boolean>(false);
  const [{{ lowercase_class_name }}Detail, set{{ class_name }}Detail] = useState<{{ class_name }}Detail | null>(null);
  const on{{ class_name }}Detail = async ({{ lowercase_class_name }}Page: {{ class_name }}Page) => {
    setIs{{ class_name }}DetailDrawerVisible(true);
    const id = {{ lowercase_class_name }}Page.id;
    await fetch{{ class_name }}Detail(id).then(set{{ class_name }}Detail);
  };

  const on{{ class_name }}DetailClose = async () => {
    set{{ class_name }}Detail(null);
    setIs{{ class_name }}DetailDrawerVisible(false);
  };

  // 表格列信息
  const {{lowercase_class_name}}PageColumns: ColumnsType<{{class_name}}Page> = [
    {
      title: "Id",
      dataIndex: "{{ primary_key }}",
      key: "{{ primary_key }}",
      hidden: true,
    },
    {
      title: "序号",
      dataIndex: "No",
      key: "No",
      render: (_: number, _record: {{class_name}}Page, rowIndex: number) => rowIndex + 1,
      width: "8%",
    },
    {%- for field in fields %}
    {%- set dict_type = field.gen_field.dict_type %}
    {%- set comment = "" -%}
    {%- if field.gen_field.critical == 1 and field.gen_field.field_name != primary_key -%}
        {%- if field.field.comment and field.field.comment != "" -%}
            {%- set parentheseIndex_en = field.field.comment.find("(") -%}
            {%- set parentheseIndex_cn = field.field.comment.find("（") -%}
            {%- if parentheseIndex_en!= -1 -%}
                {% set comment = field.field.comment[:parentheseIndex_en] %}
            {%- elif parentheseIndex_cn!= -1 -%}
                {% set comment = field.field.comment[:parentheseIndex_cn] %}
            {%- else -%}
                {%- set comment = field.field.comment -%}
            {%- endif -%}
        {%- endif %}
    {
      title: "{{ comment }}",
      dataIndex: "{{ field.gen_field.field_name }}",
      key: "{{ field.gen_field.field_name }}",
      {%- if "Time" in field.gen_field.field_name or "Date" in field.gen_field.field_name or "time" in field.gen_field.field_name or "date" in field.gen_field.field_name or "day" in field.gen_field.field_name %}
      render: (text: string) => (
        text ? <span>{dayjs(text).format('YYYY-MM-DD HH:mm:ss')}</span>: "-"
      ),
      width: "14%",
      {%- elif field.gen_field.html_type == "imageUpload" %}
      render: (text) => (text ? <ImagePreview src={text} width="100%" /> : "-"),
      {%- elif dict_type %}
      render: (text) => {
          const values = (text!== undefined && text!== null)? String(text).split(',') : [];
          return values.map((value, index) => {
              const item = dictData["{{ dict_type }}"].find((d) => d.value === value);
              if (item) {
                  const content = <span key={item.value}>{item.label}</span>;
                  return index < values.length - 1? (
                      <React.Fragment key={`${item.value}-with-comma`}>
                          {content},&nbsp;
                      </React.Fragment>
                  ) : content;
              }
              return null;
          });
      },
      {% elif field.gen_field.js_type == "string" %}
      render: (text) => (text ? text : "-"),
      width: "12%",
      {%- endif %}
      {%- if field.gen_field.js_type == "string" %}
      ellipsis: true,
      {%- elif field.gen_field.js_type == "number" %}
      width: "6%",
      {%- endif %}
    },
    {%- endif%}
    {%- endfor %}
    {
      title: "操作",
      key: "action",
      align: "center",
      render: (_, record) => (
        <div className="flex gap-2 items-center justify-center">
          <button
            type="button"
            className="flex items-center gap-0.5 text-xs btn-operation"
            onClick={ () => on{{ ClassName }}Detail(record)}
          >
            <EyeOutlined className="w-3 h-3" />
            详情
          </button>
          <button
            type="button"
            className="flex items-center gap-0.5 text-xs btn-operation"
            onClick={ () => on{{ ClassName }}Update(record)}
          >
            <EditOutlined className="w-3 h-3" />
            编辑
          </button>
          <button
            type="button"
            className="flex items-center gap-0.5 text-xs btn-remove"
            onClick={ () => handle{{ ClassName }}Delete(record)}
          >
            <DeleteOutlined className="w-3 h-3" />
            删除
          </button>

          {showMore && (
            <button type="button" className="flex items-center gap-0.5 text-xs btn-operation">
              <span>更多</span>
              <MoreOutlined className="w-3 h-3" />
            </button>
          )}
        </div>
      ),
    },
  ]

  const [visibleColumns, setVisibleColumns] = useState({{ lowercase_class_name }}PageColumns.map(col => col.key));
  const onToggleColumnVisibility = (columnKey: number) => {
    setVisibleColumns(prevVisibleColumns => {
      if (prevVisibleColumns.includes(columnKey)) {
        return prevVisibleColumns.filter(key => key !== columnKey);
      } else {
        return [...prevVisibleColumns, columnKey];
      }
    });
  };
  const filtered{{ class_name }}Columns = {{ lowercase_class_name }}PageColumns.filter(col => visibleColumns.includes(col.key));

  const [{{ lowercase_class_name }}QueryForm] = Form.useForm();
  const handle{{ class_name }}QueryReset = () => {
    resetPagination();
    {{ lowercase_class_name }}QueryForm.resetFields();
  };
const on{{ class_name }}QueryFinish = async () => {
    const {{ lowercase_class_name }}QueryFormData = {{ lowercase_class_name }}QueryForm.getFieldsValue();
    {%- for field in fields %}
    {%- set html_type = field.gen_field.html_type %}
    {%- set field_name = field.gen_field.field_name %}
    {%- if html_type == "datepicker" %}
        {%- if field.gen_field.query_type == "BETWEEN" %}
            const {{ field_name }} = {{ lowercase_class_name }}QueryFormData.{{ field_name }};
            const {{ field_name }}Start = {{ field_name }} ? {{ field_name }}[0]?.format('YYYY-MM-DD') : null;
            const {{ field_name }}End = {{ field_name }} ? {{ field_name }}[1]?.format('YYYY-MM-DD') : null;
            delete {{ lowercase_class_name }}QueryFormData.{{ field_name }};
            if ({{ field_name }}Start) {{ lowercase_class_name }}QueryFormData['{{ field_name }}_start'] = {{ field_name }}Start;
            if ({{ field_name }}End) {{ lowercase_class_name }}QueryFormData['{{ field_name }}_end'] = {{ field_name }}End;
        {%- else %}
            const {{ field_name }}Value = {{ lowercase_class_name }}QueryFormData.{{ field_name }} ? {{ lowercase_class_name }}QueryFormData.{{ field_name }}.format('YYYY-MM-DD') : null;
            {{ lowercase_class_name }}QueryFormData.{{ field_name }} = {{ field_name }}Value;
        {%- endif %}
    {%- endif %}
    {%- endfor %}
    const {{ lowercase_class_name }}Query = {{ lowercase_class_name }}QueryFormData as {{ class_name }}Query;
    const filtered{{ class_name }}Query = Object.fromEntries(
        Object.entries({{ lowercase_class_name }}Query).filter(([, value]) => value !== undefined && value !== null && value !== ""),
    );
    resetPagination();
    await handle{{ class_name }}QueryFinish(filtered{{ class_name }}Query as {{ class_name }}Query);
};
  const handle{{ class_name }}QueryFinish = async ({{ lowercase_class_name }}Query: {{ class_name }}Query) => {
    await fetch{{ class_name }}ByPage(BaseQueryImpl.create(current, pageSize), {{ lowercase_class_name }}Query).then((resp) => {
      set{{ class_name }}PageDataSource(resp.records);
      set{{ class_name }}PageTotalCount(resp.total);
    });
  };

  // 新增模块
  const [is{{ class_name }}CreateModalVisible, setIs{{ class_name }}CreateModalVisible] = useState(false);
  const [is{{ class_name }}CreateLoading, setIs{{ class_name }}CreateLoading] = useState(false);
  const [{{ lowercase_class_name }}CreateForm] = Form.useForm();
  const on{{ class_name }}Create = () => {
    setIs{{ class_name }}CreateModalVisible(true);
  };
  const handle{{ class_name }}CreateCancel = () => {
    {{ lowercase_class_name }}CreateForm.resetFields();
    setIs{{ class_name }}CreateModalVisible(false);
  };
  const handle{{ class_name }}CreateFinish = async ({{ lowercase_class_name }}Create: {{ class_name }}Create) => {
    setIs{{ class_name }}CreateLoading(true);
    try {
      await create{{ class_name }}({{ lowercase_class_name }}Create);
      message.success("新增成功");
      {{ lowercase_class_name }}CreateForm.resetFields();
      await on{{ class_name }}QueryFinish();
    } finally {
      setIs{{ class_name }}CreateLoading(false);
      setIs{{ class_name }}CreateModalVisible(false);
    }
  };

  // 单个删除模块
  const handle{{ class_name }}Delete = async ({{ lowercase_class_name }}Page: {{ class_name }}Page) => {
    await remove{{ class_name }}({{ lowercase_class_name }}Page.id);
    await on{{ class_name }}QueryFinish();
  };

  // 批量删除模块
  const [isBatchRemoveLoading, setIsBatchRemoveLoading] = useState<boolean>(false);
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [selectedRows, setSelectedRows] = useState<{{ class_name }}Page[]>([]);
  const resetSelectedRows = () => {
    setSelectedRowKeys([]);
    setSelectedRows([]);
  };
  const handleSelectionChange = (selectedRowKeys: React.Key[], selectedRows: {{ class_name }}Page[]) => {
    setSelectedRows(selectedRows);
    setSelectedRowKeys(selectedRowKeys);
  };
  const handle{{ class_name }}BatchRemove = async () => {
    if (selectedRowKeys.length === 0) {
      message.warning("请先选择要删除的项目");
      return;
    }
    try {
      setIsBatchRemoveLoading(true);
      await batchRemove{{ class_name }}(selectedRows.map((row) => row.id));
      await on{{ class_name }}QueryFinish();
      resetSelectedRows();
    } finally {
      setIsBatchRemoveLoading(false);
    }
  };
  const handle{{ class_name }}BatchRemoveCancel = async () => {
    resetSelectedRows();
    message.info("操作已取消");
  };

  // 单个更新模块
  const [is{{ class_name }}UpdateModalVisible, setIs{{ class_name }}UpdateModalVisible] = useState<boolean>(false);
  const [is{{ class_name }}UpdateLoading, setIs{{ class_name }}UpdateLoading] = useState<boolean>(false);
  const [{{ lowercase_class_name }}UpdateForm] = Form.useForm();
  const on{{ class_name }}Update = ({{ lowercase_class_name }}Page: {{ class_name }}Page) => {
    setIs{{ class_name }}UpdateModalVisible(true);
    setSelectedRowKeys([{{ lowercase_class_name }}Page.id])
    setSelectedRows([{{ lowercase_class_name }}Page])
    {{ lowercase_class_name }}UpdateForm.setFieldsValue({ ...{{ lowercase_class_name }}Page });
    {%- for field in fields %}
    {%- if field.gen_field.updatable == 1 and field.gen_field.field_name != primary_key %}
    {%- set html_type = field.gen_field.html_type %}
    {%- set field_name = field.gen_field.field_name %}
    {%- if html_type == "datepicker" %}
    if ({{ lowercase_class_name }}Page.{{ field_name }}) {
      {{ lowercase_class_name }}UpdateForm.setFieldsValue({ "{{ field_name }}": dayjs({{ lowercase_class_name }}Page.{{ field_name }}) });
    }
    {%- endif %}
    {%- endif %}
    {%- endfor %}
  };

  const handle{{ class_name }}UpdateCancel = () => {
    resetSelectedRows();
    {{ lowercase_class_name }}UpdateForm.resetFields();
    setIs{{ class_name }}UpdateModalVisible(false);
  };
  const handle{{ class_name }}UpdateFinish = async () => {
    const {{ lowercase_class_name }}UpdateData = (await {{ lowercase_class_name }}UpdateForm.validateFields()) as {{ class_name }}Update;
    const {{ lowercase_class_name }}Update = {...{{ lowercase_class_name }}UpdateData, id: selectedRows[0].id};
    setIs{{ class_name }}UpdateLoading(true);
    try {
      await modify{{ class_name }}({{ lowercase_class_name }}Update);
      {{ lowercase_class_name }}UpdateForm.resetFields();
      message.success("更新成功");
      await on{{ class_name }}QueryFinish();
      resetSelectedRows();
    } finally {
      setIs{{ class_name }}UpdateLoading(false);
      setIs{{ class_name }}UpdateModalVisible(false);
    }
  };

  // 批量更新模块
  const on{{ class_name }}BatchUpdate = () => {
    if (selectedRowKeys.length === 1) {
      const selectedRow = selectedRows[0]
      {{ lowercase_class_name }}BatchUpdateForm.setFieldsValue({ ...selectedRow });
      {%- for field in fields %}
      {%- if field.gen_field.updatable == 1 and field.gen_field.field_name != primary_key %}
      {%- set html_type = field.gen_field.html_type %}
      {%- set field_name = field.gen_field.field_name %}
      {%- if html_type == "datepicker" %}
      if (selectedRow.{{ field_name }}) {
        {{ lowercase_class_name }}BatchUpdateForm.setFieldsValue({ "{{ field_name }}": dayjs(selectedRow.{{ field_name }}) });
      }
      {%- endif %}
      {%- endif %}
      {%- endfor %}
      setIs{{ class_name }}BatchUpdateModalVisible(true);
    } else {
      {{ lowercase_class_name }}BatchUpdateForm.resetFields();
      setIs{{ class_name }}BatchUpdateModalVisible(true);
    }
  };
  const [is{{ class_name }}BatchUpdateModalVisible, setIs{{ class_name }}BatchUpdateModalVisible] = useState<boolean>(false);
  const [is{{ class_name }}BatchUpdateLoading, setIs{{ class_name }}BatchUpdateLoading] = useState<boolean>(false);
  const [{{ lowercase_class_name }}BatchUpdateForm] = Form.useForm();
  const handle{{ class_name }}BatchUpdateCancel = async () => {
    {{ lowercase_class_name }}BatchUpdateForm.resetFields();
    setIs{{ class_name }}BatchUpdateModalVisible(false);
    resetSelectedRows();
    message.info("操作已取消");
  };
  const handle{{ class_name }}BatchUpdateFinish = async () => {
    const {{ lowercase_class_name }}BatchUpdate = (await {{ lowercase_class_name }}BatchUpdateForm.validateFields()) as {{ class_name }}BatchUpdate;
    setIs{{ class_name }}BatchUpdateLoading(true);
    if (selectedRows === null || selectedRows.length === 0) {
      message.warning("请选择要更新的项目")
      return;
    }
    try {
      {{ lowercase_class_name }}BatchUpdate.ids = selectedRows.map((row) => row.id);
      await batchUpdate{{ class_name }}({{ lowercase_class_name }}BatchUpdate);
      {{ lowercase_class_name }}BatchUpdateForm.resetFields();
      message.success("更新成功");
      await on{{ class_name }}QueryFinish();
      resetSelectedRows();
    } finally {
      setIs{{ class_name }}BatchUpdateLoading(false);
      setIs{{ class_name }}BatchUpdateModalVisible(false);
    }
  };

  // 导入模块
  const [is{{ class_name }}ImportModalVisible, setIs{{ class_name }}ImportModalVisible] = useState<boolean>(false);
  const [is{{ class_name }}ImportLoading, setIs{{ class_name }}ImportLoading] = useState<boolean>(false);
  const [{{ lowercase_class_name }}CreateList, set{{ class_name }}CreateList] = useState<{{ class_name }}Create[]>([]);

  const on{{ class_name }}Import = () => {
    setIs{{ class_name }}ImportModalVisible(true);
  };
  const handle{{ class_name }}ImportCancel = () => {
    setIs{{ class_name }}ImportModalVisible(false);
  };
  const on{{ class_name }}ImportFinish = async (fileList: RcFile[]) => {
    try {
      setIs{{ class_name }}ImportLoading(true);
      const {{ lowercase_class_name }}CreateList = await import{{ class_name }}(fileList[0]);
      set{{ class_name }}CreateList({{ lowercase_class_name }}CreateList);
      return {{ lowercase_class_name }}CreateList;
    } finally {
      setIs{{ class_name }}ImportLoading(false);
    }
  };

  const handle{{ class_name }}Import = async () => {
    setIs{{ class_name }}ImportLoading(true);
    try {
      await batchCreate{{ class_name }}({{ lowercase_class_name }}CreateList);
      message.success("导入成功");
      setIs{{ class_name }}ImportModalVisible(false);
      await on{{ class_name }}QueryFinish();
    } finally {
      setIs{{ class_name }}ImportLoading(false);
      set{{ class_name }}CreateList([]);
    }
  };

  // 导出模块
  const [isExportLoading, setIsExportLoading] = useState<boolean>(false);
  const on{{ class_name }}Export = async () => {
    if (selectedRowKeys === null || selectedRowKeys.length === 0) {
      message.warning("请先选择导出的项目");
      return;
    }
    try {
      setIsExportLoading(true);
      await export{{ class_name }}Page(selectedRows.map((row) => row.id));
      resetSelectedRows();
    } finally {
      setIsExportLoading(false);
    }
  };

  return (
    <div className="w-full mx-auto px-4 bg-white">
      <TransitionWrapper show={is{{ class_name }}QueryShow}>
        <div className="shadow-sm">
          <{{ class_name }}QueryComponent
            on{{ class_name }}QueryFinish={on{{ class_name }}QueryFinish}
            on{{ class_name }}QueryReset={handle{{ class_name }}QueryReset}
            {{ lowercase_class_name }}QueryForm={ {{ lowercase_class_name }}QueryForm}
          />
        </div>
      </TransitionWrapper>
      <div>
        <ActionButtonComponent
          onCreate={on{{ class_name }}Create}
          onImport={on{{ class_name }}Import}
          onExport={on{{ class_name }}Export}
          onBatchUpdate={on{{ class_name }}BatchUpdate}
          onConfirmBatchRemove={handle{{ class_name }}BatchRemove}
          onConfirmBatchRemoveCancel={handle{{ class_name }}BatchRemoveCancel}
          isQueryShow={is{{ class_name }}QueryShow}
          onQueryShow={on{{ class_name }}QueryShow}
          isExportDisabled={selectedRowKeys.length === 0}
          isBatchUpdateDisabled={selectedRowKeys.length === 0}
          isBatchRemoveDisabled={selectedRowKeys.length === 0}
          isBatchRemoveLoading={isBatchRemoveLoading}
          isExportLoading={isExportLoading}
          rawColumns={ {{ lowercase_class_name }}PageColumns as any[]}
          visibleColumns={visibleColumns as any[]}
          onToggleColumnVisibility={onToggleColumnVisibility}
          actionConfig={actionConfig}
          className="mb-2 mt-4"
        />
      </div>
      <div>
        <PaginatedTable<{{ class_name }}Page>
          columns={ filtered{{ class_name }}Columns}
          dataSource={ {{ lowercase_class_name }}PageDataSource}
          total={ {{ lowercase_class_name }}PageTotalCount}
          current={current}
          pageSize={pageSize}
          onPaginationChange={handlePaginationChange}
          onSelectionChange={handleSelectionChange}
          selectedRowKeys={selectedRowKeys}
          rowKey="id"
        />
      </div>
      <div>
        <div>
          <{{ class_name }}CreateComponent
            is{{ class_name }}CreateModalVisible={is{{ class_name }}CreateModalVisible}
            on{{ class_name }}CreateCancel={handle{{ class_name }}CreateCancel}
            on{{ class_name }}CreateFinish={handle{{ class_name }}CreateFinish}
            is{{ class_name }}CreateLoading={is{{ class_name }}CreateLoading}
            {{ lowercase_class_name }}CreateForm={ {{ lowercase_class_name }}CreateForm}
            {%- if "" != tree_parent_code %}
            treeSelectDataSource={ {{ lowercase_class_name }}PageDataSource }
            {%- endif %}
          />
        </div>
        <div>
          <{{ class_name }}DetailComponent
            is{{ class_name }}DetailDrawerVisible={is{{ class_name }}DetailDrawerVisible}
            on{{ class_name }}DetailClose={on{{ class_name }}DetailClose}
            {{ lowercase_class_name }}Detail={ {{ lowercase_class_name }}Detail}
          />
        </div>
        <div>
          <{{ class_name }}UpdateComponent
            is{{ class_name }}UpdateModalVisible={is{{ class_name }}UpdateModalVisible}
            on{{ class_name }}UpdateCancel={handle{{ class_name }}UpdateCancel}
            on{{ class_name }}UpdateFinish={handle{{ class_name }}UpdateFinish}
            is{{ class_name }}UpdateLoading={is{{ class_name }}UpdateLoading}
            {{ lowercase_class_name }}UpdateForm={ {{ lowercase_class_name }}UpdateForm}
            {%- if "" != tree_parent_code %}
            treeSelectDataSource={ {{ lowercase_class_name }}PageDataSource }
            {%- endif %}
          />
        </div>
        <div>
          <{{ class_name }}BatchUpdateComponent
            is{{ class_name }}BatchUpdateModalVisible={is{{ class_name }}BatchUpdateModalVisible}
            on{{ class_name }}BatchUpdateCancel={handle{{ class_name }}BatchUpdateCancel}
            on{{ class_name }}BatchUpdateFinish={handle{{ class_name }}BatchUpdateFinish}
            is{{ class_name }}BatchUpdateLoading={is{{ class_name }}BatchUpdateLoading}
            {{ lowercase_class_name }}BatchUpdateForm={ {{ lowercase_class_name }}BatchUpdateForm}
            {%- if "" != tree_parent_code %}
            treeSelectDataSource={ {{ lowercase_class_name }}PageDataSource }
            {%- endif %}
          />
        </div>
        <div>
          <{{ class_name }}ImportComponent
            is{{ class_name }}ImportModalVisible={is{{ class_name }}ImportModalVisible}
            is{{ class_name }}ImportLoading={is{{ class_name }}ImportLoading}
            on{{ class_name }}ImportFinish={on{{ class_name }}ImportFinish}
            on{{ class_name }}ImportCancel={handle{{ class_name }}ImportCancel}
            handle{{ class_name }}Import={handle{{ class_name }}Import}
          />
        </div>
      </div>
    </div>
  );
};

export default {{ class_name }};
