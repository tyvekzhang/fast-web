# Copyright (c) 2025 Fast web and/or its affiliates. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""{{ ClassName }} REST Controller"""

from typing import Dict, Annotated, List, Any, Union
from fastapi import APIRouter, Query, UploadFile, Form, Request, Depends
from starlette.responses import StreamingResponse
from src.main.app.core.security import get_current_user
from src.main.app.core.schema import HttpResponse, CurrentUser
from src.main.app.core.utils import excel_util
from src.main.app.mapper.{{ table_name }}_mapper import {{ className }}Mapper
from src.main.app.model.{{ table_name }}_model import {{ ClassName }}Model
from src.main.app.core.schema import PageResult
from src.main.app.schema.{{ table_name }}_schema import {{ ClassName }}Query, {{ ClassName }}Modify, {{ ClassName }}Create, \
    {{ ClassName }}BatchModify, {{ ClassName }}Detail
from src.main.app.service.impl.{{ table_name }}_service_impl import {{ ClassName }}ServiceImpl
from src.main.app.service.{{ table_name }}_service import {{ ClassName }}Service

{{ c_n }}_router = APIRouter()
{{ c_n }}_service: {{ ClassName }}Service = {{ ClassName }}ServiceImpl(mapper={{ className }}Mapper)


@{{ c_n }}_router.get("/detail/{id}")
async def get_{{ c_n }}_detail(
    id: int,
    current_user: CurrentUser = Depends(get_current_user())
) -> HttpResponse[{{ ClassName }}Detail]:
    {{ c_n }}_detail: {{ ClassName }}Detail = await {{ c_n }}_service.get_{{ c_n }}_detail(id=id, current_user=current_user)
    return HttpResponse.success({{ c_n }}_detail)

@{{ c_n }}_router.get("/page")
async def get_{{ c_n }}_by_page(
    {{ c_n }}_query: Annotated[{{ ClassName }}Query, Query()],
    current_user: CurrentUser = Depends(get_current_user())
) -> HttpResponse[PageResult]:
    {{ c_n }}_page_result: PageResult = await {{ c_n }}_service.get_{{ c_n }}_by_page(
        {{ c_n }}_query={{ c_n }}_query,
        current_user=current_user
    )
    return HttpResponse.success({{ c_n }}_page_result)





@{{ c_n }}_router.get("/export-template")
async def export_template(current_user: CurrentUser = Depends(get_current_user())) -> StreamingResponse:
    return await excel_util.export_excel(schema={{ ClassName }}Create, file_name="{{ c_n }}_import_tpl")


@{{ c_n }}_router.get("/export")
async def export_{{ c_n }}_page(
    ids: list[int] = Query(...),
    current_user: CurrentUser = Depends(get_current_user())
) -> StreamingResponse:
    return await {{ c_n }}_service.export_{{ c_n }}_page(ids=ids, current_user=current_user)


@{{ c_n }}_router.post("/create")
async def create_{{ c_n }}(
    {{ c_n }}_create: {{ ClassName }}Create,
    current_user: CurrentUser  = Depends(get_current_user())
) -> HttpResponse[int]:
    {%- for field in fields %}
    {%- if field.gen_field.creatable == 1  %}
    {%- if field.gen_field.html_type == "checkbox" %}
    {{ c_n }}_create.{{ field.gen_field.field_name }} = ",".join({{ c_n }}_create.{{ field.gen_field.field_name }})
    {%- elif field.gen_field.html_type == "treeselect" %}
    {{ c_n }}_create.{{ field.gen_field.field_name }} = {{ c_n }}_create.{{ field.gen_field.field_name }}[0]
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    {{ c_n }}: {{ ClassName }}Model = await {{ c_n }}_service.create_{{ c_n }}({{ c_n }}_create={{ c_n }}_create, current_user=current_user)
    return HttpResponse.success({{ c_n }}.id)


@{{ c_n }}_router.post("/batch-create")
async def batch_create_{{ c_n }}(
    {{ c_n }}_create_list: List[{{ ClassName }}Create],
    current_user: CurrentUser = Depends(get_current_user())
) -> HttpResponse[List[int]]:
    ids: List[int] = await {{ c_n }}_service.batch_create_{{ c_n }}({{ c_n }}_create_list={{ c_n }}_create_list, current_user=current_user)
    return HttpResponse.success(ids)


@{{ c_n }}_router.post("/import")
async def import_{{ c_n }}(
    file: UploadFile = Form(),
    current_user: CurrentUser = Depends(get_current_user())
) ->  HttpResponse[List[{{ ClassName }}Create]]:
    {{ c_n }}_create_list: List[{{ ClassName }}Create] = await {{ c_n }}_service.import_{{ c_n }}(file=file, current_user=current_user)
    return HttpResponse.success({{ c_n }}_create_list)


@{{ c_n }}_router.delete("/remove/{id}")
async def remove_{{ c_n }}(
    id: int,
    current_user: CurrentUser = Depends(get_current_user())
) -> HttpResponse:
    await {{ c_n }}_service.remove_by_id(id=id)
    return HttpResponse.success()


@{{ c_n }}_router.delete("/batch-remove")
async def batch_remove_{{ c_n }}(
    ids: List[int] = Query(...),
    current_user: CurrentUser = Depends(get_current_user())
) -> HttpResponse:
    await {{ c_n }}_service.batch_remove_by_ids(ids=ids)
    return HttpResponse.success()


@{{ c_n }}_router.put("/modify")
async def modify_{{ c_n }}(
    {{ c_n }}_modify: {{ ClassName }}Modify,
    current_user: CurrentUser = Depends(get_current_user())
) -> HttpResponse:
    {%- for field in fields %}
    {%- if field.gen_field.modifiable == 1  %}
    {%- if field.gen_field.html_type == "checkbox" %}
    {{ c_n }}_modify.{{ field.gen_field.field_name }} = ",".join({{ c_n }}_modify.{{ field.gen_field.field_name }})
    {%- elif field.gen_field.html_type == "treeselect" %}
    {{ c_n }}_modify.{{ field.gen_field.field_name }} = {{ c_n }}_modify.{{ field.gen_field.field_name }}[0]
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    await {{ c_n }}_service.modify_by_id(data={{ ClassName }}Model(**{{ c_n }}_modify.model_dump(exclude_unset=True)))
    return HttpResponse.success()


@{{ c_n }}_router.put("/batch-modify")
async def batch_modify_{{ c_n }}({{ c_n }}_batch_modify: {{ ClassName }}BatchModify, current_user: CurrentUser = Depends(get_current_user())) -> HttpResponse:
    cleaned_data = {k: v for k, v in {{ c_n }}_batch_modify.model_dump().items() if v is not None and k != "ids"}
    {%- for field in fields %}
    {%- if field.gen_field.batch_modifiable == 1  %}
    {%- if field.gen_field.html_type == "checkbox" %}
    {{ c_n }}_batch_modify.{{ field.gen_field.field_name }} = ",".join({{ c_n }}_batch_modify.{{ field.gen_field.field_name }})
    {%- elif field.gen_field.html_type == "treeselect" %}
    {{ c_n }}_batch_modify.{{ field.gen_field.field_name }} = {{ c_n }}_batch_modify.{{ field.gen_field.field_name }}[0]
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    await {{ c_n }}_service.batch_modify_by_ids(ids={{ c_n }}_batch_modify.ids, data=cleaned_data)
    return HttpResponse.success()
