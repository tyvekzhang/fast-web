{{ license }}
"""{{ ClassName }} REST Controller"""
from __future__ import annotations
from typing import Annotated

from fastapi import APIRouter, Query, Form
from starlette.responses import StreamingResponse

from src.main.app.core.schema import ListResult
from src.main.app.mapper.{{ c_n }}_mapper import {{ cN }}Mapper
from src.main.app.model.{{ c_n }}_model import {{ CN }}Model
from src.main.app.schema.{{ c_n }}_schema import (
    List{{ CNs }}Request,
    {{ CN }},
    Create{{ CN }}Request,
    {{ CN }}Detail,
    Update{{ CN }}Request,
    BatchDelete{{ CNs }}Request,
    BatchUpdate{{ CNs }}Request,
    BatchUpdate{{ CNs }}Response,
    BatchCreate{{ CNs }}Request,
    BatchCreate{{ CNs }}Response,
    Export{{ CNs }}Request,
    Import{{ CNs }}Response,
    BatchGet{{ CNs }}Response,
    Import{{ CNs }}Request,
    Import{{ CN }}, BatchPatch{{ CNs }}Request,
)
from src.main.app.service.impl.{{ c_n }}_service_impl import {{ CN }}ServiceImpl
from src.main.app.service.{{ c_n }}_service import {{ CN }}Service

{{ c_n }}_router = APIRouter()
{{ c_n }}_service: {{ CN }}Service = {{ CN }}ServiceImpl(mapper={{ cN }}Mapper)


@{{ c_n }}_router.get("/{{ cNs }}/{id}")
async def get_{{ c_n }}(id: int) -> {{ CN }}Detail:
    """
    Retrieve {{ c_n }} details.

    Args:

        id: Unique ID of the {{ c_n }} resource.

    Returns:

        {{ CN }}Detail: The {{ c_n }} object containing all its details.

    Raises:

        HTTPException(403 Forbidden): If the current user does not have permission.
        HTTPException(404 Not Found): If the requested {{ c_n }} does not exist.
    """
    {{ c_n }}_record: {{ CN }}Model = await {{ c_n }}_service.get_{{ c_n }}(id=id)
    return {{ CN }}Detail(**{{ c_n }}_record.model_dump())


@{{ c_n }}_router.get("/{{ cNs }}")
async def list_{{ c_ns }}(
    req: Annotated[List{{ CNs }}Request, Query()],
) -> ListResult[{{ CN }}]:
    """
    List {{ c_ns }} with pagination.

    Args:

        req: Request object containing pagination, filter and sort parameters.

    Returns:

        ListResult: Paginated list of {{ c_ns }} and total count.

    Raises:

        HTTPException(403 Forbidden): If user don't have access rights.
    """
    {{ c_n }}_records, total = await {{ c_n }}_service.list_{{ c_ns }}(req=req)
    {{ c_n }}_records_with_children: list[
        {{ CN }}
    ] = await {{ c_n }}_service.get_children_recursively(
        parent_data={{ c_n }}_records, schema_class={{ CN }}
    )
    return ListResult(records={{ c_n }}_records_with_children, total=total)


@{{ c_n }}_router.post("/{{ cNs }}")
async def creat_{{ c_n }}(
    req: Create{{ CN }}Request,
) -> {{ CN }}:
    """
    Create a new {{ c_n }}.

    Args:

        req: Request object containing {{ c_n }} creation data.

    Returns:

         {{ CN }}: The {{ c_n }} object.

    Raises:

        HTTPException(403 Forbidden): If the current user don't have access rights.
        HTTPException(409 Conflict): If the creation data already exists.
    """
    {{ c_n }}: {{ CN }}Model = await {{ c_n }}_service.create_{{ c_n }}(req=req)
    return {{ CN }}(**{{ c_n }}.model_dump())


@{{ c_n }}_router.put("/{{ cNs }}")
async def update_{{ c_n }}(
    req: Update{{ CN }}Request,
) -> {{ CN }}:
    """
    Update an existing {{ c_n }}.

    Args:

        req: Request object containing {{ c_n }} update data.

    Returns:

        {{ CN }}: The updated {{ c_n }} object.

    Raises:

        HTTPException(403 Forbidden): If the current user doesn't have update permissions.
        HTTPException(404 Not Found): If the {{ c_n }} to update doesn't exist.
    """
    {{ c_n }}: {{ CN }}Model = await {{ c_n }}_service.update_{{ c_n }}(req=req)
    return {{ CN }}(**{{ c_n }}.model_dump())


@{{ c_n }}_router.delete("/{{ cNs }}/{id}")
async def delete_{{ c_n }}(
    id: int,
) -> None:
    """
    Delete {{ c_n }} by ID.

    Args:

        id: The ID of the {{ c_n }} to delete.

    Raises:

        HTTPException(403 Forbidden): If the current user doesn't have access permissions.
        HTTPException(404 Not Found): If the {{ c_n }} with given ID doesn't exist.
    """
    await {{ c_n }}_service.delete_{{ c_n }}(id=id)


@{{ c_n }}_router.get("/{{ cNs }}:batchGet")
async def batch_get_{{ c_ns }}(
    ids: list[int] = Query(..., description="List of {{ c_n }} IDs to retrieve"),
) -> BatchGet{{ CNs }}Response:
    """
    Retrieves multiple {{ c_ns }} by their IDs.

    Args:

        ids (list[int]): A list of {{ c_n }} resource IDs.

    Returns:

        list[{{ CN }}Detail]: A list of {{ c_n }} objects matching the provided IDs.

    Raises:

        HTTPException(403 Forbidden): If the current user does not have access rights.
        HTTPException(404 Not Found): If one of the requested {{ c_ns }} does not exist.
    """
    {{ c_n }}_records: list[{{ CN }}Model] = await {{ c_n }}_service.batch_get_{{ c_ns }}(ids)
    {{ c_n }}_detail_list: list[{{ CN }}Detail] = [
        {{ CN }}Detail(**{{ c_n }}_record.model_dump()) for {{ c_n }}_record in {{ c_n }}_records
    ]
    return BatchGet{{ CNs }}Response({{ c_ns }}={{ c_n }}_detail_list)


@{{ c_n }}_router.post("/{{ cNs }}:batchCreate")
async def batch_create_{{ c_ns }}(
    req: BatchCreate{{ CNs }}Request,
) -> BatchCreate{{ CNs }}Response:
    """
    Batch create {{ c_ns }}.

    Args:

        req (BatchCreate{{ CNs }}Request): Request body containing a list of {{ c_n }} creation items.

    Returns:

        BatchCreate{{ CNs }}Response: Response containing the list of created {{ c_ns }}.

    Raises:

        HTTPException(403 Forbidden): If the current user lacks access rights.
        HTTPException(409 Conflict): If any {{ c_n }} creation data already exists.
    """

    {{ c_n }}_records = await {{ c_n }}_service.batch_create_{{ c_ns }}(req=req)
    {{ c_n }}_list: list[{{ CN }}] = [
        {{ CN }}(**{{ c_n }}_record.model_dump()) for {{ c_n }}_record in {{ c_n }}_records
    ]
    return BatchCreate{{ CNs }}Response({{ c_ns }}={{ c_n }}_list)


@{{ c_n }}_router.post("/{{ cNs }}:batchUpdate")
async def batch_update_{{ c_ns }}(
    req: BatchUpdate{{ CNs }}Request,
) -> BatchUpdate{{ CNs }}Response:
    """
    Batch update multiple {{ c_ns }} with the same changes.

    Args:

        req (BatchUpdate{{ CNs }}Request): The batch update request data with ids.

    Returns:

        BatchUpdateBooksResponse: Contains the list of updated {{ c_ns }}.

    Raises:

        HTTPException 403 (Forbidden): If user lacks permission to modify {{ c_ns }}
        HTTPException 404 (Not Found): If any specified {{ c_n }} ID doesn't exist
    """
    {{ c_n }}_records: list[{{ CN }}Model] = await {{ c_n }}_service.batch_update_{{ c_ns }}(req=req)
    {{ c_n }}_list: list[{{ CN }}] = [{{ CN }}(**{{ c_n }}.model_dump()) for {{ c_n }} in {{ c_n }}_records]
    return BatchUpdate{{ CNs }}Response({{ c_ns }}={{ c_n }}_list)


@{{ c_n }}_router.post("/{{ cNs }}:batchPatch")
async def batch_patch_{{ c_ns }}(
    req: BatchPatch{{ CNs }}Request,
) -> BatchUpdate{{ CNs }}Response:
    """
    Batch update multiple {{ c_ns }} with individual changes.

    Args:

        req (BatchPatch{{ CNs }}Request): The batch patch request data.

    Returns:

        BatchUpdateBooksResponse: Contains the list of updated {{ c_ns }}.

    Raises:

        HTTPException 403 (Forbidden): If user lacks permission to modify {{ c_ns }}
        HTTPException 404 (Not Found): If any specified {{ c_n }} ID doesn't exist
    """
    {{ c_n }}_records: list[{{ CN }}Model] = await {{ c_n }}_service.batch_patch_{{ c_ns }}(req=req)
    {{ c_n }}_list: list[{{ CN }}] = [{{ CN }}(**{{ c_n }}.model_dump()) for {{ c_n }} in {{ c_n }}_records]
    return BatchUpdate{{ CNs }}Response({{ c_ns }}={{ c_n }}_list)


@{{ c_n }}_router.post("/{{ cNs }}:batchDelete")
async def batch_delete_{{ c_ns }}(
    req: BatchDelete{{ CNs }}Request,
) -> None:
    """
    Batch delete {{ c_ns }}.

    Args:
        req (BatchDelete{{ CNs }}Request): Request object containing delete info.

    Raises:
        HTTPException(404 Not Found): If any of the {{ c_ns }} do not exist.
        HTTPException(403 Forbidden): If user don't have access rights.
    """
    await {{ c_n }}_service.batch_delete_{{ c_ns }}(req=req)


@{{ c_n }}_router.get("/{{ cNs }}:exportTemplate")
async def export_{{ c_ns }}_template() -> StreamingResponse:
    """
    Export the Excel template for {{ c_n }} import.

    Returns:
        StreamingResponse: An Excel file stream containing the import template.

    Raises:
        HTTPException(403 Forbidden): If user don't have access rights.
    """

    return await {{ c_n }}_service.export_{{ c_ns }}_template()


@{{ c_n }}_router.get("/{{ cNs }}:export")
async def export_{{ c_ns }}(
    req: Export{{ CNs }}Request = Query(...),
) -> StreamingResponse:
    """
    Export {{ c_n }} data based on the provided {{ c_n }} IDs.

    Args:
        req (Export{{ CNs }}Request): Query parameters specifying the {{ c_ns }} to export.

    Returns:
        StreamingResponse: A streaming response containing the generated Excel file.

    Raises:
        HTTPException(403 Forbidden): If the current user lacks access rights.
        HTTPException(404 Not Found ): If no matching {{ c_ns }} are found.
    """
    return await {{ c_n }}_service.export_{{ c_ns }}(
        req=req,
    )

@{{ c_n }}_router.post("/{{ cNs }}:import")
async def import_{{ c_ns }}(
    req: Import{{ CNs }}Request = Form(...),
) -> Import{{ CNs }}Response:
    """
    Import {{ c_ns }} from an uploaded Excel file.

    Args:
        req (UploadFile): The Excel file containing {{ c_n }} data to import.

    Returns:
        Import{{ CNs }}Response: List of successfully parsed {{ c_n }} data.

    Raises:
        HTTPException(400 Bad Request): If the uploaded file is invalid or cannot be parsed.
        HTTPException(403 Forbidden): If the current user lacks access rights.
    """

    import_{{ c_ns }}_resp: list[Import{{ CN }}] = await {{ c_n }}_service.import_{{ c_ns }}(
        req=req
    )
    return Import{{ CNs }}Response({{ c_ns }}=import_{{ c_ns }}_resp)
